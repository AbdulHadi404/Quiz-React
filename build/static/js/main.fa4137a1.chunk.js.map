{"version":3,"sources":["components/SubComponents/ProgressBar.js","components/SubComponents/ProgressCircularScoreMax.js","components/SubComponents/ProgressCircularScore.js","components/SubComponents/ProgressBuffer.js","components/SubComponents/OptionButton.js","components/SubComponents/Rating.js","components/SubComponents/Status.js","components/Card.js","components/QuizEnd.js","App.js","serviceWorker.js","index.js"],"names":["LinearProgressWithLabel","props","react_default","a","createElement","Box","display","alignItems","width","mr","LinearProgress","Object","assign","variant","minWidth","Typography","color","concat","Math","round","value","useStyles","makeStyles","progress","margin","LinearWithValueLabel","_ref","questionNumber","totalQuestions","classes","_React$useState","React","useState","_React$useState2","slicedToArray","setProgress","useEffect","className","CircularProgressWithLabel","position","CircularProgress","top","left","bottom","right","justifyContent","component","CircularStatic","score","floor","ProgressCircularScore_CircularProgressWithLabel","root","LinearBuffer","_React$useState3","_React$useState4","buffer","setBuffer","useRef","valueBuffer","UseStyles","theme","btn","flex","padding","maxWidth","optionsButton","options","optionsHandler","map","option","Button","onClick","key","decodeURIComponent","ratings","difficulty","arr","Array","filled","index_es","icon","starFilled","outline","starOutlined","fill","& > * + *","marginTop","spacing","Status","status","Alert","severity","flexFlow","minHeight","content","textAlign","btncontainer","flexDirection","question","marginLeft","fontSize","fontWeight","bottomContainer","scoreProgress","alignSelf","maxScoreProgress","questionCard","nextHandler","title","Card","CardHeader","category","subheader","Rating","CardContent","paragraph","OptionButton","toConsumableArray","SubComponents_Status","ProgressCircularScore_CircularStatic","pos","marginBottom","quizEnd","restartQuiz","App","_useState","_useState2","currentIndex","setIndex","_useState3","_useState4","setScore","_useState5","_useState6","isLast","setIsLast","_useState7","_useState8","setStatus","questions","length","answer","alert","correct_answer","prevScore","undefined","prevIdx","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8oLAMA,SAASA,EAAwBC,GAC/B,OACEC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAKC,QAAQ,OAAOC,WAAW,UAC7BL,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAKG,MAAM,OAAOC,GAAI,GACpBP,EAAAC,EAAAC,cAACM,EAAA,EAADC,OAAAC,OAAA,CAAgBC,QAAQ,eAAkBZ,KAE5CC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAKS,SAAU,IACbZ,EAAAC,EAAAC,cAACW,EAAA,EAAD,CAAYF,QAAQ,QAAQG,MAAM,iBAAlC,GAAAC,OAAsDC,KAAKC,MACzDlB,EAAMmB,OADR,QAQR,IAAMC,EAAYC,YAAW,CAC3BC,SAAU,CACRC,OAAQ,OACRhB,MAAO,SAII,SAASiB,EAATC,GAGZ,IAFDC,EAECD,EAFDC,eACAC,EACCF,EADDE,eAEMC,EAAUR,IADfS,EAE+BC,IAAMC,SAAS,IAF9CC,EAAAtB,OAAAuB,EAAA,EAAAvB,CAAAmB,EAAA,GAEMP,EAFNU,EAAA,GAEgBE,EAFhBF,EAAA,GAUD,OANAF,IAAMK,UAAU,WACdD,EACgE,KAA3C,GAAlBR,EAAsB,EAAIA,EAAiBC,KAE7C,CAACD,IAGFzB,EAAAC,EAAAC,cAAA,OAAKiC,UAAWR,EAAQN,UACtBrB,EAAAC,EAAAC,cAACJ,EAAD,CAAyBoB,MAAOG,iBCrCtC,SAASe,EAA0BrC,GACjC,OACEC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAKkC,SAAS,WAAWjC,QAAQ,eAC/BJ,EAAAC,EAAAC,cAACoC,EAAA,EAAD7B,OAAAC,OAAA,CAAkBC,QAAQ,eAAkBZ,IAC5CC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACEoC,IAAK,EACLC,KAAM,EACNC,OAAQ,EACRC,MAAO,EACPL,SAAS,WACTjC,QAAQ,OACRC,WAAW,SACXsC,eAAe,UAEf3C,EAAAC,EAAAC,cAACW,EAAA,EAAD,CACEF,QAAQ,UACRiC,UAAU,MACV9B,MAAM,iBAHR,GAAAC,OAIKC,KAAKC,MAAMlB,EAAMmB,OAJtB,QAkBO,SAAS2B,EAATrB,GAIZ,IAHDsB,EAGCtB,EAHDsB,MACApB,EAECF,EAFDE,eACAD,EACCD,EADDC,eACCG,EAC+BC,IAAMC,SAAS,IAD9CC,EAAAtB,OAAAuB,EAAA,EAAAvB,CAAAmB,EAAA,GACMP,EADNU,EAAA,GACgBE,EADhBF,EAAA,GAWD,OARAF,IAAMK,UAAU,WACdD,EACqB,IAAnBR,EACI,IACAT,KAAK+B,OAAQrB,EAAiBoB,GAASpB,EAAkB,OAE9D,CAACD,IAEGzB,EAAAC,EAAAC,cAACkC,EAAD,CAA2BlB,MAAOG,IC/C3C,SAASe,EAA0BrC,GACjC,OACEC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAKkC,SAAS,WAAWjC,QAAQ,eAC/BJ,EAAAC,EAAAC,cAACoC,EAAA,EAAD7B,OAAAC,OAAA,CAAkBC,QAAQ,eAAkBZ,IAC5CC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACEoC,IAAK,EACLC,KAAM,EACNC,OAAQ,EACRC,MAAO,EACPL,SAAS,WACTjC,QAAQ,OACRC,WAAW,SACXsC,eAAe,UAEf3C,EAAAC,EAAAC,cAACW,EAAA,EAAD,CACEF,QAAQ,UACRiC,UAAU,MACV9B,MAAM,iBAHR,GAAAC,OAIKC,KAAKC,MAAMlB,EAAMmB,OAJtB,QAkBO,SAAS2B,EAATrB,GAAmD,IAAzBsB,EAAyBtB,EAAzBsB,MAAOpB,EAAkBF,EAAlBE,eAAkBE,EAChCC,IAAMC,SAAS,IADiBC,EAAAtB,OAAAuB,EAAA,EAAAvB,CAAAmB,EAAA,GACzDP,EADyDU,EAAA,GAC/CE,EAD+CF,EAAA,GAOhE,OAJAF,IAAMK,UAAU,WACdD,EAAaa,EAAQpB,EAAkB,MACtC,CAACoB,IAEG9C,EAAAC,EAAAC,cAAC8C,EAAD,CAA2B9B,MAAOG,ICzC3C,IAAMF,EAAYC,YAAW,CAC3B6B,KAAM,CACJ3C,MAAO,UAII,SAAS4C,EAAT1B,GAIZ,IAHDsB,EAGCtB,EAHDsB,MACApB,EAECF,EAFDE,eACAD,EACCD,EADDC,eAEME,EAAUR,IADfS,EAE+BC,IAAMC,SAAS,GAF9CC,EAAAtB,OAAAuB,EAAA,EAAAvB,CAAAmB,EAAA,GAEMP,EAFNU,EAAA,GAEgBE,EAFhBF,EAAA,GAAAoB,EAG2BtB,IAAMC,SAAS,IAH1CsB,EAAA3C,OAAAuB,EAAA,EAAAvB,CAAA0C,EAAA,GAGME,EAHND,EAAA,GAGcE,EAHdF,EAAA,GAKmBvB,IAAM0B,OAAO,cAKjC,OAJA1B,IAAMK,UAAU,WACdD,EAAaa,EAAQpB,EAAkB,KACvC4B,GAAY5B,EAAiBoB,GAASpB,EAAkB,MACvD,CAACD,IAEFzB,EAAAC,EAAAC,cAAA,OAAKiC,UAAWR,EAAQsB,MACtBjD,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAgBG,QAAQ,SAASO,MAAOG,EAAUmC,YAAaH,KCtBrE,IAAMI,EAAYrC,YAAW,SAACsC,GAAD,MAAY,CACvCC,IAAK,CACHC,KAAM,EACNC,QAAS,GACTvC,OAAQ,EACRwC,SAAU,QAuBCC,EAnBO,SAAAvC,GAAiC,IAA9BwC,EAA8BxC,EAA9BwC,QAASC,EAAqBzC,EAArByC,eAC1BtC,EAAU8B,IAChB,OACEzD,EAAAC,EAAAC,cAAA,WACG8D,EAAQE,IAAI,SAACC,GAAD,OACXnE,EAAAC,EAAAC,cAACkE,EAAA,EAAD,CACEjC,UAAWR,EAAQgC,IACnBhD,QAAQ,YACRG,MAAM,YACNuD,QAAS,kBAAMJ,EAAeE,IAC9BG,IAAKH,GAEJI,mBAAmBJ,gCCLfK,EAfC,SAACC,GACf,IAAIC,EAAM,IAAIC,MAAM,GAChBC,EAAS5E,EAAAC,EAAAC,cAAC2E,EAAA,EAAD,CAAiBC,KAAMC,MAChCC,EAAUhF,EAAAC,EAAAC,cAAC2E,EAAA,EAAD,CAAiBC,KAAMG,MACrC,OAAQR,GACN,IAAK,OACH,OAAOC,EAAIQ,KAAKN,EAAQ,EAAG,GAAGM,KAAKF,EAAS,EAAG,GACjD,IAAK,SACH,OAAON,EAAIQ,KAAKN,EAAQ,EAAG,GAAGM,KAAKF,EAAS,EAAG,GACjD,IAAK,OACH,OAAON,EAAIQ,KAAKN,EAAQ,EAAG,GAAGM,KAAKF,EAAS,EAAG,GACjD,QACE,OAAO,eCbP7D,EAAYC,YAAW,SAACsC,GAAD,MAAY,CACvCT,KAAM,CACJ3C,MAAO,OACP6E,YAAa,CACXC,UAAW1B,EAAM2B,QAAQ,QAmBhBC,EAdA,SAAA9D,GAAgB,IAAb+D,EAAa/D,EAAb+D,OACV5D,EAAUR,IAEhB,OACEnB,EAAAC,EAAAC,cAAA,OAAKiC,UAAWR,EAAQsB,MACX,MAAVsC,GAA4B,kBAAVA,EACjBvF,EAAAC,EAAAC,cAACsF,EAAA,EAAD,CAAOC,SAAS,WAAhB,wCACY,UAAVF,EACFvF,EAAAC,EAAAC,cAACsF,EAAA,EAAD,CAAOC,SAAS,WAAhB,+BACE,KACJzF,EAAAC,EAAAC,cAAA,aCRAuD,EAAYrC,YAAW,SAACsC,GAAD,MAAY,CACvCT,KAAM,CACJ3B,OAAQ,OACR8D,UAAW,MACXhF,QAAS,OACTsF,SAAU,SACV9E,SAAU,IACVkD,SAAU,IACV6B,UAAW,KAEbC,QAAS,CACPC,UAAW,UAEbC,aAAc,CACZlC,KAAM,EACNiC,UAAW,SACXE,cAAe,MACfpD,eAAgB,SAChBtC,WAAY,UAEd2F,SAAU,CACRC,WAAY,GACZC,SAAU,GACVC,WAAY,QAEdC,gBAAiB,CACfhG,QAAS,OACTsF,SAAU,OAEZW,cAAe,CACbC,UAAW,cAEbC,iBAAkB,CAChBN,WAAY,OACZK,UAAW,eAIA,SAASE,EAAThF,GAQZ,IAPDC,EAOCD,EAPDC,eACAgF,EAMCjF,EANDiF,YACAT,EAKCxE,EALDwE,SACAtE,EAICF,EAJDE,eACAuC,EAGCzC,EAHDyC,eACAsB,EAEC/D,EAFD+D,OACAzC,EACCtB,EADDsB,MAEMnB,EAAU8B,IACViD,EAAK,YAAA3F,OAAeU,EAAf,QAAAV,OAAoCW,GAE/C,OACE1B,EAAAC,EAAAC,cAACyG,EAAA,EAAD,CAAMxE,UAAWR,EAAQsB,MACvBjD,EAAAC,EAAAC,cAACqB,EAAD,CACEE,eAAgBA,EAChBC,eAAgBA,IAElB1B,EAAAC,EAAAC,cAAC0G,EAAA,EAAD,CAAYzE,UAAWR,EAAQiE,QAASc,MAAOA,IAC/C1G,EAAAC,EAAAC,cAAC0G,EAAA,EAAD,CACEzE,UAAWR,EAAQiE,QACnBc,MAAOnC,mBAAmByB,EAASa,UACnCC,UAAU,aAEZ9G,EAAAC,EAAAC,cAAC0G,EAAA,EAAD,CACEzE,UAAWR,EAAQiE,QACnBc,MAAOK,EAAOf,EAASvB,YACvBqC,UAAU,eAEZ9G,EAAAC,EAAAC,cAAC8G,EAAA,EAAD,KACEhH,EAAAC,EAAAC,cAACW,EAAA,EAAD,CAAYsB,UAAWR,EAAQqE,SAAUiB,WAAS,GAAlD,aAGAjH,EAAAC,EAAAC,cAACW,EAAA,EAAD,CAAYsB,UAAWR,EAAQiE,QAASqB,WAAS,GAC9C1C,mBAAmByB,EAASA,YAGjChG,EAAAC,EAAAC,cAAC8G,EAAA,EAAD,CAAa7E,UAAWR,EAAQmE,cAC9B9F,EAAAC,EAAAC,cAACgH,EAAD,CACEjD,eAAgBA,EAChBD,QAAO,GAAAjD,OAAAN,OAAA0G,EAAA,EAAA1G,CACFuF,EAAQ,mBADN,CAELA,EAAQ,oBAIdhG,EAAAC,EAAAC,cAAC8G,EAAA,EAAD,CAAa7E,UAAWR,EAAQmE,cAC9B9F,EAAAC,EAAAC,cAACkH,EAAD,CAAQ7B,OAAQA,IAChBvF,EAAAC,EAAAC,cAACkE,EAAA,EAAD,CAAQzD,QAAQ,YAAYG,MAAM,YAAYuD,QAASoC,GAAvD,SAIFzG,EAAAC,EAAAC,cAAC8G,EAAA,EAAD,CAAa7E,UAAWR,EAAQyE,iBAC9BpG,EAAAC,EAAAC,cAAC8G,EAAA,EAAD,CAAa7E,UAAWR,EAAQ0E,eAAhC,UACArG,EAAAC,EAAAC,cAACmH,EAAD,CACE3F,eAAgBA,EAChBoB,MAAOA,EACPX,UAAWR,EAAQ0E,gBAErBrG,EAAAC,EAAAC,cAAC8G,EAAA,EAAD,CAAa7E,UAAWR,EAAQ4E,kBAAhC,cAGAvG,EAAAC,EAAAC,cAAC2C,EAAD,CACEpB,eAAgBA,EAChBC,eAAgBA,EAChBoB,MAAOA,EACPX,UAAWR,EAAQ4E,oBAGvBvG,EAAAC,EAAAC,cAAC8G,EAAA,EAAD,KACEhH,EAAAC,EAAAC,cAACgD,EAAD,CACEzB,eAAgBA,EAChBC,eAAgBA,EAChBoB,MAAOA,kBCvHXW,EAAYrC,YAAW,CAC3B6B,KAAM,CAEJmC,UAAW,OACX9D,OAAQ,OACRwC,SAAU,KAEZ4C,MAAO,CACLR,SAAU,IAEZoB,IAAK,CACHC,aAAc,MAIH,SAASC,EAAThG,GAAkC,IAAfiG,EAAejG,EAAfiG,YAC1B9F,EAAU8B,IAEhB,OACEzD,EAAAC,EAAAC,cAACyG,EAAA,EAAD,CAAMxE,UAAWR,EAAQsB,MACvBjD,EAAAC,EAAAC,cAAC8G,EAAA,EAAD,KACEhH,EAAAC,EAAAC,cAACW,EAAA,EAAD,CAAYF,QAAQ,KAAKiC,UAAU,MAAnC,kCAGA5C,EAAAC,EAAAC,cAACW,EAAA,EAAD,CAAYsB,UAAWR,EAAQ2F,IAAKxG,MAAM,iBAA1C,oCAGAd,EAAAC,EAAAC,cAACkE,EAAA,EAAD,CAAQC,QAASoD,EAAa9G,QAAQ,YAAYG,MAAM,aAAxD,aC9BR,IAqDe4G,EArDH,WAAM,IAAAC,EACiB7F,mBAAS,GAD1B8F,EAAAnH,OAAAuB,EAAA,EAAAvB,CAAAkH,EAAA,GACTE,EADSD,EAAA,GACKE,EADLF,EAAA,GAAAG,EAEUjG,mBAAS,GAFnBkG,EAAAvH,OAAAuB,EAAA,EAAAvB,CAAAsH,EAAA,GAETjF,EAFSkF,EAAA,GAEFC,EAFED,EAAA,GAAAE,EAGYpG,oBAAS,GAHrBqG,EAAA1H,OAAAuB,EAAA,EAAAvB,CAAAyH,EAAA,GAGTE,EAHSD,EAAA,GAGDE,EAHCF,EAAA,GAAAG,EAIYxG,mBAAS,MAJrByG,EAAA9H,OAAAuB,EAAA,EAAAvB,CAAA6H,EAAA,GAIT/C,EAJSgD,EAAA,GAIDC,EAJCD,EAAA,GAmChB,OAAIH,EACKpI,EAAAC,EAAAC,cAACsH,EAAD,CAAMC,YARK,WAClBQ,EAAS,GACTI,GAAU,GACVP,EAAS,GACTU,EAAU,SAOVxI,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACsG,EAAD,CACE/E,eAAgBoG,EAAe,EAC/BnG,eAAgB+G,EAAUC,OAC1B1C,SAAUyC,EAAUZ,GACpB5D,eAtCiB,SAAC0E,GACP,OAAXpD,EACFqD,MAAM,6BACGD,IAAWF,EAAUZ,GAAcgB,gBAC5CZ,EAAS,SAACa,GAAD,OAAeA,EAAY,IACpCN,EAAU,mBAEVA,EAAU,WAgCR/B,YA5Be,WACJ,OAAXlB,EACFqD,MAAM,iCACmCG,IAAhCN,EAAUZ,EAAe,IAClCC,EAAS,SAACkB,GAAD,OAAaA,EAAU,IAChCR,EAAU,OAEVH,GAAU,IAsBR9C,OAAQA,EACRzC,MAAOA,MCvCKmG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOvJ,EAAAC,EAAAC,cAACsJ,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.fa4137a1.chunk.js","sourcesContent":["import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Box from '@material-ui/core/Box';\r\n\r\nfunction LinearProgressWithLabel(props) {\r\n  return (\r\n    <Box display=\"flex\" alignItems=\"center\">\r\n      <Box width=\"100%\" mr={1}>\r\n        <LinearProgress variant=\"determinate\" {...props} />\r\n      </Box>\r\n      <Box minWidth={35}>\r\n        <Typography variant=\"body2\" color=\"textSecondary\">{`${Math.round(\r\n          props.value\r\n        )}%`}</Typography>\r\n      </Box>\r\n    </Box>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles({\r\n  progress: {\r\n    margin: 'auto',\r\n    width: '90%',\r\n  },\r\n});\r\n\r\nexport default function LinearWithValueLabel({\r\n  questionNumber,\r\n  totalQuestions,\r\n}) {\r\n  const classes = useStyles();\r\n  const [progress, setProgress] = React.useState(10);\r\n\r\n  React.useEffect(() => {\r\n    setProgress(\r\n      (questionNumber == 1 ? 0 : questionNumber / totalQuestions) * 100\r\n    );\r\n  }, [questionNumber]);\r\n\r\n  return (\r\n    <div className={classes.progress}>\r\n      <LinearProgressWithLabel value={progress} />\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Box from '@material-ui/core/Box';\r\n\r\nfunction CircularProgressWithLabel(props) {\r\n  return (\r\n    <Box position=\"relative\" display=\"inline-flex\">\r\n      <CircularProgress variant=\"determinate\" {...props} />\r\n      <Box\r\n        top={0}\r\n        left={0}\r\n        bottom={0}\r\n        right={0}\r\n        position=\"absolute\"\r\n        display=\"flex\"\r\n        alignItems=\"center\"\r\n        justifyContent=\"center\"\r\n      >\r\n        <Typography\r\n          variant=\"caption\"\r\n          component=\"div\"\r\n          color=\"textSecondary\"\r\n        >{`${Math.round(props.value)}%`}</Typography>\r\n      </Box>\r\n    </Box>\r\n  );\r\n}\r\n\r\nCircularProgressWithLabel.propTypes = {\r\n  /**\r\n   * The value of the progress indicator for the determinate variant.\r\n   * Value between 0 and 100.\r\n   */\r\n  value: PropTypes.number.isRequired,\r\n};\r\n\r\nexport default function CircularStatic({\r\n  score,\r\n  totalQuestions,\r\n  questionNumber,\r\n}) {\r\n  const [progress, setProgress] = React.useState(10);\r\n\r\n  React.useEffect(() => {\r\n    setProgress(\r\n      questionNumber === 1\r\n        ? 100\r\n        : Math.floor(((totalQuestions - score) / totalQuestions) * 100)\r\n    );\r\n  }, [questionNumber]);\r\n\r\n  return <CircularProgressWithLabel value={progress} />;\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Box from '@material-ui/core/Box';\r\n\r\nfunction CircularProgressWithLabel(props) {\r\n  return (\r\n    <Box position=\"relative\" display=\"inline-flex\">\r\n      <CircularProgress variant=\"determinate\" {...props} />\r\n      <Box\r\n        top={0}\r\n        left={0}\r\n        bottom={0}\r\n        right={0}\r\n        position=\"absolute\"\r\n        display=\"flex\"\r\n        alignItems=\"center\"\r\n        justifyContent=\"center\"\r\n      >\r\n        <Typography\r\n          variant=\"caption\"\r\n          component=\"div\"\r\n          color=\"textSecondary\"\r\n        >{`${Math.round(props.value)}%`}</Typography>\r\n      </Box>\r\n    </Box>\r\n  );\r\n}\r\n\r\nCircularProgressWithLabel.propTypes = {\r\n  /**\r\n   * The value of the progress indicator for the determinate variant.\r\n   * Value between 0 and 100.\r\n   */\r\n  value: PropTypes.number.isRequired,\r\n};\r\n\r\nexport default function CircularStatic({ score, totalQuestions }) {\r\n  const [progress, setProgress] = React.useState(10);\r\n\r\n  React.useEffect(() => {\r\n    setProgress((score / totalQuestions) * 100);\r\n  }, [score]);\r\n\r\n  return <CircularProgressWithLabel value={progress} />;\r\n}\r\n","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    width: '100%',\r\n  },\r\n});\r\n\r\nexport default function LinearBuffer({\r\n  score,\r\n  totalQuestions,\r\n  questionNumber,\r\n}) {\r\n  const classes = useStyles();\r\n  const [progress, setProgress] = React.useState(0);\r\n  const [buffer, setBuffer] = React.useState(10);\r\n\r\n  const progressRef = React.useRef(() => {});\r\n  React.useEffect(() => {\r\n    setProgress((score / totalQuestions) * 100);\r\n    setBuffer(((totalQuestions - score) / totalQuestions) * 100);\r\n  }, [questionNumber]);\r\n  return (\r\n    <div className={classes.root}>\r\n      <LinearProgress variant=\"buffer\" value={progress} valueBuffer={buffer} />\r\n    </div>\r\n  );\r\n}\r\n","import Button from '@material-ui/core/Button';\r\nimport React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst UseStyles = makeStyles((theme) => ({\r\n  btn: {\r\n    flex: 1,\r\n    padding: 10,\r\n    margin: 5,\r\n    maxWidth: 400,\r\n  },\r\n}));\r\n\r\nconst optionsButton = ({ options, optionsHandler }) => {\r\n  const classes = UseStyles();\r\n  return (\r\n    <div>\r\n      {options.map((option) => (\r\n        <Button\r\n          className={classes.btn}\r\n          variant=\"contained\"\r\n          color=\"secondary\"\r\n          onClick={() => optionsHandler(option)}\r\n          key={option}\r\n        >\r\n          {decodeURIComponent(option)}\r\n        </Button>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default optionsButton;\r\n","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faStar as starFilled } from '@fortawesome/free-solid-svg-icons';\r\nimport { faStar as starOutlined } from '@fortawesome/free-regular-svg-icons';\r\nimport React from 'react';\r\n\r\nconst ratings = (difficulty) => {\r\n  let arr = new Array(5);\r\n  var filled = <FontAwesomeIcon icon={starFilled} />;\r\n  var outline = <FontAwesomeIcon icon={starOutlined} />;\r\n  switch (difficulty) {\r\n    case 'easy':\r\n      return arr.fill(filled, 0, 1).fill(outline, 1, 5);\r\n    case 'medium':\r\n      return arr.fill(filled, 0, 2).fill(outline, 2, 5);\r\n    case 'hard':\r\n      return arr.fill(filled, 0, 3).fill(outline, 3, 5);\r\n    default:\r\n      return null;\r\n  }\r\n};\r\nexport default ratings;\r\n","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Alert from '@material-ui/lab/Alert';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: '100%',\r\n    '& > * + *': {\r\n      marginTop: theme.spacing(2),\r\n    },\r\n  },\r\n}));\r\n\r\nconst Status = ({ status }) => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      {status != null && status == 'Correct Answer' ? (\r\n        <Alert severity=\"success\">Correct Answer — Great Success!</Alert>\r\n      ) : status == 'Sorry!' ? (\r\n        <Alert severity=\"warning\">Sorry — Wrong Answer :</Alert>\r\n      ) : null}\r\n      <br />\r\n    </div>\r\n  );\r\n};\r\nexport default Status;\r\n","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardHeader from '@material-ui/core/CardHeader';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport ProgressBar from './SubComponents/ProgressBar';\r\nimport ProgressCircularScoreMax from './SubComponents/ProgressCircularScoreMax';\r\nimport ProgressCircularScore from './SubComponents/ProgressCircularScore';\r\nimport ProgressBuffer from './SubComponents/ProgressBuffer';\r\nimport Buttons from './SubComponents/OptionButton';\r\nimport Rating from './SubComponents/Rating';\r\nimport Status from './SubComponents/Status';\r\n\r\nconst UseStyles = makeStyles((theme) => ({\r\n  root: {\r\n    margin: 'auto',\r\n    marginTop: '2vh',\r\n    display: 'flex',\r\n    flexFlow: 'column',\r\n    minWidth: 400,\r\n    maxWidth: 800,\r\n    minHeight: 300,\r\n  },\r\n  content: {\r\n    textAlign: 'center',\r\n  },\r\n  btncontainer: {\r\n    flex: 1,\r\n    textAlign: 'center',\r\n    flexDirection: 'row',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n  },\r\n  question: {\r\n    marginLeft: 80,\r\n    fontSize: 18,\r\n    fontWeight: 'bold',\r\n  },\r\n  bottomContainer: {\r\n    display: 'flex',\r\n    flexFlow: 'row',\r\n  },\r\n  scoreProgress: {\r\n    alignSelf: 'flex-start',\r\n  },\r\n  maxScoreProgress: {\r\n    marginLeft: 'auto',\r\n    alignSelf: 'flex-end',\r\n  },\r\n}));\r\n\r\nexport default function questionCard({\r\n  questionNumber,\r\n  nextHandler,\r\n  question,\r\n  totalQuestions,\r\n  optionsHandler,\r\n  status,\r\n  score,\r\n}) {\r\n  const classes = UseStyles();\r\n  const title = `Question ${questionNumber} of ${totalQuestions}`;\r\n\r\n  return (\r\n    <Card className={classes.root}>\r\n      <ProgressBar\r\n        questionNumber={questionNumber}\r\n        totalQuestions={totalQuestions}\r\n      />\r\n      <CardHeader className={classes.content} title={title} />\r\n      <CardHeader\r\n        className={classes.content}\r\n        title={decodeURIComponent(question.category)}\r\n        subheader=\"Category\"\r\n      />\r\n      <CardHeader\r\n        className={classes.content}\r\n        title={Rating(question.difficulty)}\r\n        subheader=\"Difficulty\"\r\n      ></CardHeader>\r\n      <CardContent>\r\n        <Typography className={classes.question} paragraph>\r\n          Question:\r\n        </Typography>\r\n        <Typography className={classes.content} paragraph>\r\n          {decodeURIComponent(question.question)}\r\n        </Typography>\r\n      </CardContent>\r\n      <CardContent className={classes.btncontainer}>\r\n        <Buttons\r\n          optionsHandler={optionsHandler}\r\n          options={[\r\n            ...question['incorrect_answers'],\r\n            question['correct_answer'],\r\n          ]}\r\n        />\r\n      </CardContent>\r\n      <CardContent className={classes.btncontainer}>\r\n        <Status status={status} />\r\n        <Button variant=\"contained\" color=\"secondary\" onClick={nextHandler}>\r\n          Next\r\n        </Button>\r\n      </CardContent>\r\n      <CardContent className={classes.bottomContainer}>\r\n        <CardContent className={classes.scoreProgress}>Score:</CardContent>\r\n        <ProgressCircularScore\r\n          totalQuestions={totalQuestions}\r\n          score={score}\r\n          className={classes.scoreProgress}\r\n        />\r\n        <CardContent className={classes.maxScoreProgress}>\r\n          Max Score:\r\n        </CardContent>\r\n        <ProgressCircularScoreMax\r\n          questionNumber={questionNumber}\r\n          totalQuestions={totalQuestions}\r\n          score={score}\r\n          className={classes.maxScoreProgress}\r\n        />\r\n      </CardContent>\r\n      <CardContent>\r\n        <ProgressBuffer\r\n          questionNumber={questionNumber}\r\n          totalQuestions={totalQuestions}\r\n          score={score}\r\n        />\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nconst UseStyles = makeStyles({\r\n  root: {\r\n    // display: 'flex',\r\n    marginTop: '25vh',\r\n    margin: 'auto',\r\n    maxWidth: 400,\r\n  },\r\n  title: {\r\n    fontSize: 14,\r\n  },\r\n  pos: {\r\n    marginBottom: 12,\r\n  },\r\n});\r\n\r\nexport default function quizEnd({ restartQuiz }) {\r\n  const classes = UseStyles();\r\n\r\n  return (\r\n    <Card className={classes.root}>\r\n      <CardContent>\r\n        <Typography variant=\"h5\" component=\"h2\">\r\n          Thank you for taking the Quiz!\r\n        </Typography>\r\n        <Typography className={classes.pos} color=\"textSecondary\">\r\n          Press restart to retake the Quiz\r\n        </Typography>\r\n        <Button onClick={restartQuiz} variant=\"contained\" color=\"secondary\">\r\n          Restart\r\n        </Button>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n","import React, { useState } from 'react';\r\nimport Card from './components/Card';\r\nimport questions from './questions.json';\r\nimport Quiz from './components/QuizEnd';\r\nconst App = () => {\r\n  const [currentIndex, setIndex] = useState(0);\r\n  const [score, setScore] = useState(0);\r\n  const [isLast, setIsLast] = useState(false);\r\n  const [status, setStatus] = useState(null);\r\n\r\n  const optionsHandler = (answer) => {\r\n    if (status !== null) {\r\n      alert('You have already answered');\r\n    } else if (answer === questions[currentIndex].correct_answer) {\r\n      setScore((prevScore) => prevScore + 1);\r\n      setStatus('Correct Answer');\r\n    } else {\r\n      setStatus('Sorry!');\r\n    }\r\n  };\r\n\r\n  const nextHanndler = () => {\r\n    if (status === null) {\r\n      alert('Please select an option.');\r\n    } else if (questions[currentIndex + 1] !== undefined) {\r\n      setIndex((prevIdx) => prevIdx + 1);\r\n      setStatus(null);\r\n    } else {\r\n      setIsLast(true);\r\n    }\r\n  };\r\n\r\n  const restartQuiz = () => {\r\n    setScore(0);\r\n    setIsLast(false);\r\n    setIndex(0);\r\n    setStatus(null);\r\n  };\r\n\r\n  if (isLast) {\r\n    return <Quiz restartQuiz={restartQuiz} />;\r\n  }\r\n  return (\r\n    <div>\r\n      <Card\r\n        questionNumber={currentIndex + 1}\r\n        totalQuestions={questions.length}\r\n        question={questions[currentIndex]}\r\n        optionsHandler={optionsHandler}\r\n        nextHandler={nextHanndler}\r\n        status={status}\r\n        score={score}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n)\r\n\r\nexport function register (config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config)\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          )\r\n        })\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config)\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\nfunction registerValidSW (swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing\r\n        if (installingWorker == null) {\r\n          return\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              )\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration)\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.')\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration)\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error)\r\n    })\r\n}\r\n\r\nfunction checkValidServiceWorker (swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  window.fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type')\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload()\r\n          })\r\n        })\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config)\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      )\r\n    })\r\n}\r\n\r\nexport function unregister () {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister()\r\n    })\r\n  }\r\n}\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport App from './App'\r\nimport * as serviceWorker from './serviceWorker'\r\n\r\nReactDOM.render(<App />, document.getElementById('root'))\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister()\r\n"],"sourceRoot":""}